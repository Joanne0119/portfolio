/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF, useTexture, useVideoTexture } from '@react-three/drei'
import { gsap } from "gsap";
import { useGSAP } from '@gsap/react';
import { useMediaQuery } from 'react-responsive'


const Macbook = (props) => {
    const macRef = useRef();

    useGSAP(() => {
      gsap.to(macRef.current.position, {
        y: macRef.current.position.y + 0.2,
        duration: 1.2,
        repeat: -1,
        yoyo: true,
      })
   });

  const { nodes, materials } = useGLTF('/models/computer.glb')
  const isMobile = useMediaQuery({ maxWidth: 768 })
  let txt;
  
  if(!isMobile){
    txt = useVideoTexture(props.texture ? props.texture : 'https://raw.githubusercontent.com/Joanne0119/portfolio/main/public/projects/PortfolioDemo.mp4', {
      loop: true,
      muted: true,
      start: true,
      crossOrigin: "Anonymous"
    });
  }else{
    txt = useTexture(props.texture? props.texture : 'https://raw.githubusercontent.com/Joanne0119/portfolio/main/public/projects/PortfolioMobile.jpg')
  }

  return (
    <group {...props} dispose={null} ref={macRef}>
      <group position={[0, 0.294, -0.604]} rotation={[-0.247, 0, 0]} scale={[1, 1.073, 1]}>
        <mesh castShadow receiveShadow geometry={nodes.Cube015.geometry} material={materials.Mac} />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube015_1.geometry}
          material={materials.Mac_Black}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.keyboard.geometry}
        material={materials.Mac}
        position={[0, 0.294, -0.604]}
        rotation={[0, -Math.PI / 2, 0]}
        scale={[0.963, 1, 1]}
      />
      <mesh castShadow receiveShadow geometry={nodes.Screen.geometry} material={materials.dot} >
        <meshBasicMaterial map={txt} />
    </mesh>
    </group>
  )
}

useGLTF.preload('/models/computer.glb')

export default Macbook
